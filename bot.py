import os
import asyncio
import logging
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ö–Ω–æ–ø–∫–∞
keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É P2P", callback_data="get_price")]
    ]
)


@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É:", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data == "get_price")
async def handle_callback(callback: types.CallbackQuery):
    await callback.answer("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Ü–µ–Ω—É...")
    offers = await fetch_p2p_data()

    if not offers:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É.")
        return

    # –ë–µ—Ä—ë–º —Å—Ç—Ä–æ–∫–∏ —Å 6 –ø–æ 11 (–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0 ‚Äî —ç—Ç–æ 5 –ø–æ 10)
    selected = offers[5:11]
    prices = [float(i["price"]) for i in selected]
    avg_price = sum(prices) / len(prices)

    text = f"üìà <b>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (6‚Äì11 —Å—Ç—Ä–æ–∫–∏):</b>\n\n{hbold(round(avg_price, 2))} ‚ÇΩ"
    await callback.message.answer(text)


async def fetch_p2p_data():
    url = "https://api2.bybit.com/fiat/otc/item/online"

    payload = {
        "userId": "",
        "tokenId": "USDT",
        "currencyId": "RUB",
        "payment": ["Local Green Bank"],  # –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ–ø–ª–∞—Ç–∞
        "side": "1",  # 1 = –ø–æ–∫—É–ø–∫–∞, 0 = –ø—Ä–æ–¥–∞–∂–∞
        "size": "",
        "page": 1,
        "amount": "",
        "authMaker": False
    }

    async with httpx.AsyncClient(timeout=10) as client:
        try:
            response = await client.post(url, json=payload)
            response.raise_for_status()
            data = response.json()

            print("DEBUG: BYBIT API RESPONSE:", data)  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç

            if data.get("result", {}).get("items"):
                return data["result"]["items"]

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Bybit:", e)

    return None


if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
